#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include <map>
using namespace std;

// Structure to hold food data
struct Food {
    string name;
    float normal_pH_low, normal_pH_high;
    string normal_color;
    vector<string> adulterants;
    vector<string> health_effects;
    vector<string> tests;
};

// Function to load food database from a file
vector<Food> loadFoodDatabase() {
    vector<Food> database;
    ifstream file("food_data.txt");

    if (!file) {
        cout << "Error: Database file not found!\n";
        return database;
    }

    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        Food temp;
        string adulterant, health_effect, test;

        ss >> temp.name >> temp.normal_pH_low >> temp.normal_pH_high >> temp.normal_color;

        // Read multiple adulterants, health effects, and tests
        while (ss >> adulterant >> health_effect >> test) {
            temp.adulterants.push_back(adulterant);
            temp.health_effects.push_back(health_effect);
            temp.tests.push_back(test);
        }

        database.push_back(temp);
    }

    file.close();
    return database;
}

// Function to check adulteration
void checkAdulteration(vector<Food>& database, string food_name, float user_pH, string user_color) {
    for (const auto& food : database) {
        if (food.name == food_name) {
            bool isAdulterated = false;
            cout << "\n🔍 Checking " << food_name << " for adulteration...\n";

            if (user_pH < food.normal_pH_low || user_pH > food.normal_pH_high) {
                cout << "⚠️ Abnormal pH detected!\n";
                isAdulterated = true;
            }
            if (user_color != food.normal_color) {
                cout << "⚠️ Abnormal color detected!\n";
                isAdulterated = true;
            }

            if (isAdulterated) {
                cout << "\n🚨 Possible Adulterants & Effects:\n";
                for (size_t i = 0; i < food.adulterants.size(); i++) {
                    cout << "🔹 Adulterant: " << food.adulterants[i] << " | ⚠️ Effect: " << food.health_effects[i] << endl;
                    cout << "🧪 DIY Test: " << food.tests[i] << endl;
                }
            } else {
                cout << "✅ No adulteration detected.\n";
            }
            return;
        }
    }
    cout << "⚠️ Food item not found in database.\n";
}

// Function to save user test history
void saveTestHistory(string food, float pH, string color, string result) {
    ofstream file("test_history.txt", ios::app);
    file << "Food: " << food << ", pH: " << pH << ", Color: " << color << ", Result: " << result << "\n";
    file.close();
}

// Function to display test history
void displayTestHistory() {
    ifstream file("test_history.txt");
    if (!file) {
        cout << "No previous tests found.\n";
        return;
    }

    cout << "\n📜 Previous Tests:\n";
    string line;
    while (getline(file, line)) {
        cout << line << endl;
    }
    file.close();
}

// Main menu
void menu(vector<Food>& database) {
    int choice;
    do {
        cout << "\n🔹 Food Adulteration Detection System 🔹\n";
        cout << "1️⃣ Check Food for Adulteration\n";
        cout << "2️⃣ View Previous Test History\n";
        cout << "3️⃣ Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == 1) {
            string food_name, user_color;
            float user_pH;

            cout << "Enter food name (e.g., Milk, Turmeric): ";
            cin >> food_name;
            cout << "Enter observed pH level: ";
            cin >> user_pH;
            cout << "Enter observed color: ";
            cin >> user_color;

            checkAdulteration(database, food_name, user_pH, user_color);
            saveTestHistory(food_name, user_pH, user_color, "Checked");

        } else if (choice == 2) {
            displayTestHistory();
        }
    } while (choice != 3);
}

int main() {
    vector<Food> foodDatabase = loadFoodDatabase();
    menu(foodDatabase);
    return 0;
}
